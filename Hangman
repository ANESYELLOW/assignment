import tkinter as tk
import random

class HangmanGame:
    def __init__(self, root):
        self.root = root
        self.root.title("Hangman Game")
        
        # Initialize game variables
        self.words = ["python", "programming", "computer", "science", "algorithm", "database", "network"]
        self.word = random.choice(self.words)
        self.word_letters = set(self.word)
        self.alphabet = set('abcdefghijklmnopqrstuvwxyz')
        self.used_letters = set()
        self.lives = 6
        self.score = 0
        
        # Create GUI components
        self.score_label = tk.Label(root, text=f"Score: {self.score}", font=("Arial", 16))
        self.score_label.pack(pady=10)
        
        self.lives_label = tk.Label(root, text=f"Lives: {self.lives}", font=("Arial", 16))
        self.lives_label.pack(pady=10)
        
        self.word_label = tk.Label(root, text="Word: " + " ".join(["-" for _ in self.word]), font=("Arial", 16))
        self.word_label.pack(pady=10)
        
        self.entry_label = tk.Label(root, text="Enter a letter:", font=("Arial", 14))
        self.entry_label.pack(pady=5)
        
        self.entry = tk.Entry(root, font=("Arial", 14))
        self.entry.pack(pady=5)
        
        self.submit_button = tk.Button(root, text="Submit", command=self.check_letter)
        self.submit_button.pack(pady=10)
        
        self.message_label = tk.Label(root, text="", font=("Arial", 12), fg="red")
        self.message_label.pack(pady=10)

    def check_letter(self):
        user_letter = self.entry.get().lower()
        self.entry.delete(0, tk.END)  # Clear the input field
        
        if user_letter in (self.alphabet - self.used_letters):
            self.used_letters.add(user_letter)
            if user_letter in self.word_letters:
                self.word_letters.remove(user_letter)
                # Update score
                self.score += 10
                self.message_label.config(text=f"Good guess! '{user_letter}' is in the word.")
            else:
                # Reduce lives
                self.lives -= 1
                self.message_label.config(text=f"Wrong guess! '{user_letter}' is not in the word.")
            
            # Update GUI components
            word_list = [letter if letter in self.used_letters else "-" for letter in self.word]
            self.word_label.config(text="Word: " + " ".join(word_list))
            self.lives_label.config(text=f"Lives: {self.lives}")
            self.score_label.config(text=f"Score: {self.score}")
            
            # Check if game is over
            if len(self.word_letters) == 0:
                self.message_label.config(text=f"Congratulations! You guessed the word '{self.word}'!")
                self.submit_button.config(state=tk.DISABLED)  # Disable further inputs
            elif self.lives == 0:
                self.message_label.config(text=f"Game Over! The word was '{self.word}'.")
                self.submit_button.config(state=tk.DISABLED)  # Disable further inputs
        
        elif user_letter in self.used_letters:
            self.message_label.config(text="You have already guessed that letter. Try again.")
        
        else:
            self.message_label.config(text="Invalid character. Please enter a valid letter.")

# Run the game
if __name__ == "__main__":
    root = tk.Tk()
    game = HangmanGame(root)
    root.mainloop()
